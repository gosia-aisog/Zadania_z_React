{"ast":null,"code":"var _jsxFileName = \"E:\\\\REACT\\\\my-app\\\\src\\\\components\\\\CurrencyApp.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CurrencyApp = () => {\n  _s();\n\n  // wybrana wartosc (chosenAmount)\n  // wybrana walute (chosenCurrency)\n  const initChosenAmount = 1;\n  const initChosenCurrency = \"USD\";\n  const initCurrencies = [];\n  const [chosenAmount, setChosenAmount] = useState(initChosenAmount);\n  const [chosenCurrency, setChosenCurrency] = useState(initChosenCurrency);\n  const [currencies, setCurrencies] = useState(initCurrencies);\n  const NBP_API_URL = \"http://api.nbp.pl/api/exchangerates/tables/a/?format=json\";\n  useEffect(() => {\n    fetch(NBP_API_URL).then(response => response.json()).then(data => setCurrencies(data[0].rates)).catch(err => console.error(err));\n  }, []); // functions\n\n  const calculatedCurrency = () => {\n    var _currencies$find;\n\n    const chosenCurrencyValue = (_currencies$find = currencies.find(_ref => {\n      let {\n        code\n      } = _ref;\n      return code === chosenCurrency;\n    })) === null || _currencies$find === void 0 ? void 0 : _currencies$find.mid;\n    console.log(chosenAmount, chosenCurrencyValue);\n    return chosenAmount * chosenCurrencyValue;\n  }; // events\n\n\n  const changeChosenAmount = e => setChosenAmount(e.target.value);\n\n  const changeChosenCurrency = e => setChosenCurrency(e.target.value);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      onChange: changeChosenAmount,\n      value: chosenAmount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: changeChosenCurrency,\n      value: chosenCurrency,\n      children: currencies.map(_ref2 => {\n        let {\n          code\n        } = _ref2;\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: code,\n          children: code\n        }, code, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [\" = \", calculatedCurrency()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CurrencyApp, \"kmZOqTfzfK0S8CkYD1qQPUtMA0E=\");\n\n_c = CurrencyApp;\nexport default CurrencyApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"CurrencyApp\");","map":{"version":3,"sources":["E:/REACT/my-app/src/components/CurrencyApp.jsx"],"names":["useState","useEffect","CurrencyApp","initChosenAmount","initChosenCurrency","initCurrencies","chosenAmount","setChosenAmount","chosenCurrency","setChosenCurrency","currencies","setCurrencies","NBP_API_URL","fetch","then","response","json","data","rates","catch","err","console","error","calculatedCurrency","chosenCurrencyValue","find","code","mid","log","changeChosenAmount","e","target","value","changeChosenCurrency","map"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACxB;AACA;AACA,QAAMC,gBAAgB,GAAG,CAAzB;AACA,QAAMC,kBAAkB,GAAG,KAA3B;AACA,QAAMC,cAAc,GAAG,EAAvB;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCP,QAAQ,CAACG,gBAAD,CAAhD;AACA,QAAM,CAACK,cAAD,EAAiBC,iBAAjB,IAAsCT,QAAQ,CAACI,kBAAD,CAApD;AACA,QAAM,CAACM,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,CAACK,cAAD,CAA5C;AACA,QAAMO,WAAW,GACf,2DADF;AAGAX,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,KAAK,CAACD,WAAD,CAAL,CACGE,IADH,CACSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADtB,EAEGF,IAFH,CAESG,IAAD,IAAUN,aAAa,CAACM,IAAI,CAAC,CAAD,CAAJ,CAAQC,KAAT,CAF/B,EAGGC,KAHH,CAGUC,GAAD,IAASC,OAAO,CAACC,KAAR,CAAcF,GAAd,CAHlB;AAID,GALQ,EAKN,EALM,CAAT,CAZwB,CAmBxB;;AACA,QAAMG,kBAAkB,GAAG,MAAM;AAAA;;AAC/B,UAAMC,mBAAmB,uBAAGd,UAAU,CAACe,IAAX,CAC1B;AAAA,UAAC;AAAEC,QAAAA;AAAF,OAAD;AAAA,aAAcA,IAAI,KAAKlB,cAAvB;AAAA,KAD0B,CAAH,qDAAG,iBAEzBmB,GAFH;AAGAN,IAAAA,OAAO,CAACO,GAAR,CAAYtB,YAAZ,EAA0BkB,mBAA1B;AACA,WAAOlB,YAAY,GAAGkB,mBAAtB;AACD,GAND,CApBwB,CA4BxB;;;AACA,QAAMK,kBAAkB,GAAIC,CAAD,IAAOvB,eAAe,CAACuB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAjD;;AACA,QAAMC,oBAAoB,GAAIH,CAAD,IAAOrB,iBAAiB,CAACqB,CAAC,CAACC,MAAF,CAASC,KAAV,CAArD;;AAEA,sBACE;AAAA,4BACE;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,QAAQ,EAAEH,kBAA/B;AAAmD,MAAA,KAAK,EAAEvB;AAA1D;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAQ,MAAA,QAAQ,EAAE2B,oBAAlB;AAAwC,MAAA,KAAK,EAAEzB,cAA/C;AAAA,gBACGE,UAAU,CAACwB,GAAX,CAAe;AAAA,YAAC;AAAER,UAAAA;AAAF,SAAD;AAAA,4BACd;AAAmB,UAAA,KAAK,EAAEA,IAA1B;AAAA,oBACGA;AADH,WAAaA,IAAb;AAAA;AAAA;AAAA;AAAA,gBADc;AAAA,OAAf;AADH;AAAA;AAAA;AAAA;AAAA,YAFF,eASE;AAAA,wBAAUH,kBAAkB,EAA5B;AAAA;AAAA;AAAA;AAAA;AAAA,YATF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CA7CD;;GAAMrB,W;;KAAAA,W;AA+CN,eAAeA,WAAf","sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nconst CurrencyApp = () => {\r\n  // wybrana wartosc (chosenAmount)\r\n  // wybrana walute (chosenCurrency)\r\n  const initChosenAmount = 1;\r\n  const initChosenCurrency = \"USD\";\r\n  const initCurrencies = [];\r\n  const [chosenAmount, setChosenAmount] = useState(initChosenAmount);\r\n  const [chosenCurrency, setChosenCurrency] = useState(initChosenCurrency);\r\n  const [currencies, setCurrencies] = useState(initCurrencies);\r\n  const NBP_API_URL =\r\n    \"http://api.nbp.pl/api/exchangerates/tables/a/?format=json\";\r\n\r\n  useEffect(() => {\r\n    fetch(NBP_API_URL)\r\n      .then((response) => response.json())\r\n      .then((data) => setCurrencies(data[0].rates))\r\n      .catch((err) => console.error(err));\r\n  }, []);\r\n\r\n  // functions\r\n  const calculatedCurrency = () => {\r\n    const chosenCurrencyValue = currencies.find(\r\n      ({ code }) => code === chosenCurrency\r\n    )?.mid;\r\n    console.log(chosenAmount, chosenCurrencyValue);\r\n    return chosenAmount * chosenCurrencyValue;\r\n  };\r\n\r\n  // events\r\n  const changeChosenAmount = (e) => setChosenAmount(e.target.value);\r\n  const changeChosenCurrency = (e) => setChosenCurrency(e.target.value);\r\n\r\n  return (\r\n    <div>\r\n      <input type=\"number\" onChange={changeChosenAmount} value={chosenAmount} />\r\n      <select onChange={changeChosenCurrency} value={chosenCurrency}>\r\n        {currencies.map(({ code }) => (\r\n          <option key={code} value={code}>\r\n            {code}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      <span> = {calculatedCurrency()}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CurrencyApp;\r\n"]},"metadata":{},"sourceType":"module"}